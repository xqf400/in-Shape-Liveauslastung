{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "magic"
  },
  "name" : "InshapeLock",
  "script" : "\n\/*\n  Studios:\n  \n  In Shape Pure Plochingen \/\/In Shape Dynamic Göppingen????? Wrong Link?\n  In Shape Aalen\n  In Shape Heidenheim\n  In Shape Giengen\n  In Shape Esslingen\n  In Shape Geislingen\n  In Shape Stauferpark \/\/In Shape Premium Göppingen\n  In Shape Süßen \n  In Shape Pure \/\/In Shape Pure Göppingen\n  In Shape Pure Plochingen\n  InShape-Uhingen\n  In Shape Waeschenbeuren\n  In Shape Bad Boll\n  \n  Set it in the Parameter Setting in the Widget\n*\/\n\n\nconst studio = args.widgetParameter || 'In Shape Pure Plochingen';\n\nif (config.runsInWidget) {\n  const size = config.widgetFamily;\n  const widget = await createWidget(size);\n\n  Script.setWidget(widget);\n  Script.complete();\n} else {\n  const size = 'small';\n  const widget = await createWidget(size);\n  if (size == 'small') {\n    widget.presentSmall();\n  } else if (size == 'medium') {\n    widget.presentMedium();\n  } else {\n    widget.presentLarge();\n  }\n  Script.complete();\n}\n\nasync function createWidget(size) {\n  const auslastung = await fetchData(studio);\n\n  if (auslastung === undefined) {\n    const widget = new ListWidget();\n    widget.addText('404 - Fitnessclub not found');\n    return widget;\n  }\n\n  const widget = new ListWidget();\n  widget.setPadding(2, 3, 3, 3);\n  \n  if (studio.includes(\"Pure\")) {\n    widget.backgroundColor = new Color('#ef7f1b');\n  }else if (studio.includes(\"Dynamic\")){\/\/ Not used by api\n      widget.backgroundColor = new Color('#00858a');\n  }else{\/\/ Premium\n      widget.backgroundColor = new Color('#8f1635');\n  }\nwidget.addSpacer(2);\n  const contentStack = widget.addStack();\n  contentStack.layoutVertically();\n\n  \/\/ Studio Info\n  const studioInfo = contentStack.addStack();\n  studioInfo.layoutHorizontally();\nstudioInfo.addSpacer();\n  \/\/ Studio name\nlet name = `${studio}`;\n\nlet lastSpaceIndex = name.lastIndexOf(\" \");\n\/*\nif (lastSpaceIndex !== -1) {\n  name = name.substring(0, lastSpaceIndex) + \"\\n\" + name.substring(lastSpaceIndex + 1);\n}\n*\/\nif (lastSpaceIndex !== -1){\n  name = name.substring(lastSpaceIndex +1)\n}\n\n  const studioNameStack = studioInfo.addText(name);\n  studioNameStack.font = Font.boldRoundedSystemFont(6);\n  studioNameStack.textColor = Color.white();\n  studioInfo.centerAlignContent();\n  studioInfo.addSpacer();\n  \n  \/\/ Liveauslastung\n  const liveausLastungTextStack = contentStack.addStack();\n  liveausLastungTextStack.layoutHorizontally();\n\n  const auslastungStr = liveausLastungTextStack.addText(`Auslastung:`);\n  auslastungStr.font = Font.boldRoundedSystemFont(8);\n  auslastungStr.textColor = Color.white();\n  auslastungStr.centerAlignText()\n\n  \/\/ Auslastung Prozent\n  const auslastungStack = contentStack.addStack();\n  auslastungStack.layoutHorizontally();\n  auslastungStack.addSpacer();\n  const auslastungText = auslastungStack.addText(`${auslastung}%`);\n  auslastungStack.centerAlignContent();\n  auslastungText.font = Font.boldRoundedSystemFont(14);\n  auslastungText.textColor = Color.white();\n  auslastungStack.addSpacer();\n  \n  contentStack.addSpacer(2);\n\n  \/\/ Refresh Time\n  const dateStack = contentStack.addStack();\n  dateStack.addSpacer();\n  let dateT = new Date()\n  let df = new DateFormatter()\n  df.dateFormat = 'HH:mm'\n  let dateString = df.string(dateT)\n  const date = dateStack.addText(`#${dateString}`);\n  \n  date.font = Font.systemFont(10);\n  date.textColor = Color.white();\n  dateStack.addSpacer();\n  contentStack.addSpacer(2)\n  return widget;\n}\n\n\n\/\/ Get AuslastungData from API\nasync function fetchData(studio) {  \n\n  let req = new Request(\"https:\/\/connect.e-app.eu:57319\/easyWeb.svc\/eApps\/widgets\");\n  req.method = \"POST\"\n  req.headers = {\n        \"Connection\": \" keep-alive\",\n        \"Accept\": \" application\/json, text\/plain, *\/*\",\n        \"Origin\": \" https:\/\/eLiveauslastung.e-app.eu\",\n        \"Accept-Encoding\": \" gzip, deflate, br\",\n        \"Accept-Language\": \" de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7\",\n        \"Content-Type\": \"text\/plain\"\n   };\n   req.body = JSON.stringify({\n     call:\"GeteLiveauslastung\",\n     param:{},\n     useWS:0,\n     studio:studio\n  });\n\n  let res = await req.loadJSON();\n  const wert1 = res[\"Wert1\"];\n  \/\/ const wert2 = res[\"Wert2\"];\n   log(JSON.stringify(res, null, 2));\n  \/\/ log(wert1);\n  return wert1;\n}\n\n\n\n",
  "share_sheet_inputs" : [

  ]
}