{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-brown",
    "glyph" : "magic"
  },
  "name" : "Inshape",
  "script" : "\n\/*\n  Studios:\n  \n  In Shape Pure Plochingen \/\/In Shape Dynamic GÃ¶ppingen????? Wrong Link?\n  In Shape Aalen\n  In Shape Heidenheim\n  In Shape Giengen\n  In Shape Esslingen\n  In Shape Geislingen\n  In Shape Stauferpark \/\/In Shape Premium GÃ¶ppingen\n  In Shape SÃ¼ÃŸen \n  In Shape Pure \/\/In Shape Pure GÃ¶ppingen\n  In Shape Pure Plochingen\n  InShape-Uhingen\n  In Shape Waeschenbeuren\n  In Shape Bad Boll\n  \n  Set it in the Parameter Setting in the Widget\n*\/\n\n\nconst studio = args.widgetParameter || 'In Shape Pure Plochingen';\n\nif (config.runsInWidget) {\n  const size = config.widgetFamily;\n  const widget = await createWidget(size);\n\n  Script.setWidget(widget);\n  Script.complete();\n} else {\n  const size = 'small';\n  const widget = await createWidget(size);\n  if (size == 'small') {\n    widget.presentSmall();\n  } else if (size == 'medium') {\n    widget.presentMedium();\n  } else {\n    widget.presentLarge();\n  }\n  Script.complete();\n}\n\nasync function createWidget(size) {\n  const auslastung = await fetchData(studio);\n\n  if (auslastung === undefined) {\n    const widget = new ListWidget();\n    widget.addText('404 - Fitnessclub not found');\n    return widget;\n  }\n\n  const widget = new ListWidget();\n  widget.setPadding(8, 14, 14, 14);\n  \n  if (studio.includes(\"Pure\")) {\n    widget.backgroundColor = new Color('#ef7f1b');\n  }else if (studio.includes(\"Dynamic\")){\/\/ Not used by api\n      widget.backgroundColor = new Color('#00858a');\n  }else{\/\/ Premium\n      widget.backgroundColor = new Color('#8f1635');\n  }\n\n  const contentStack = widget.addStack();\n  contentStack.layoutVertically();\n\n  \/\/ Studio Info\n  const studioInfo = contentStack.addStack();\n  studioInfo.layoutHorizontally();\n  \n  \/\/ Studio name\n  const studioNameStack = studioInfo.addText(`${studio}`);\n  studioNameStack.font = Font.boldRoundedSystemFont(30);\n  studioNameStack.minimumScaleFactor = 0.4;\n  studioNameStack.textColor = Color.white();\n  studioInfo.addSpacer();\n  \n  \/\/ Studio Logo\n  let shapeLogoImage = await getImage();\n  let imageStack = contentStack.addStack()\n  imageStack.layoutHorizontally();\n  imageStack.addSpacer();\n  let imgstack = studioInfo.addImage(shapeLogoImage)\n  imgstack.imageSize = new Size(40,40)\n  contentStack.addSpacer();\n\n  \/\/ Liveauslastung\n  const liveausLastungTextStack = contentStack.addStack();\n  liveausLastungTextStack.layoutHorizontally();\n\n  const auslastungStr = liveausLastungTextStack.addText(`Liveauslastung:`);\n  auslastungStr.font = Font.boldRoundedSystemFont(16);\n  auslastungStr.textColor = Color.white();\n  auslastungStr.centerAlignText()\n\n  \/\/ Auslastung Prozent\n  const auslastungStack = contentStack.addStack();\n  auslastungStack.layoutHorizontally();\n  auslastungStack.addSpacer();\n  const auslastungText = auslastungStack.addText(`${auslastung}%`);\n  auslastungStack.centerAlignContent();\n  auslastungText.font = Font.boldRoundedSystemFont(30);\n  auslastungText.textColor = Color.white();\n  auslastungStack.addSpacer();\n  \n  contentStack.addSpacer();\n\n  \/\/ Refresh Time\n  const dateStack = contentStack.addStack();\n  dateStack.addSpacer();\n  dateStack.addSpacer();\n  let dateT = new Date()\n  let df = new DateFormatter()\n  df.dateFormat = 'HH:mm'\n  let dateString = df.string(dateT)\n  const date = dateStack.addText(`ðŸ”„ ${dateString}`);\n  date.font = Font.systemFont(10);\n  date.textColor = Color.white();\n\n  return widget;\n}\n\n\n\/\/ Get AuslastungData from API\nasync function fetchData(studio) {  \n\n  let req = new Request(\"https:\/\/connect.e-app.eu:57319\/easyWeb.svc\/eApps\/widgets\");\n  req.method = \"POST\"\n  req.headers = {\n    Â Â Â Â \"Connection\": \" keep-alive\",\nÂ Â Â Â Â Â Â Â \"Accept\": \" application\/json, text\/plain, *\/*\",\nÂ Â Â Â Â Â Â  \"Origin\": \" https:\/\/eLiveauslastung.e-app.eu\",\nÂ Â Â Â Â Â Â Â \"Accept-Encoding\": \" gzip, deflate, br\",\nÂ Â Â Â Â Â Â Â \"Accept-Language\": \" de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7\",\nÂ Â Â Â Â Â Â Â \"Content-Type\": \"text\/plain\"\n   };\n   req.body = JSON.stringify({\n     call:\"GeteLiveauslastung\",\n     param:{},\n     useWS:0,\n     studio:studio\n  });\n\n  let res = await req.loadJSON();\n  const wert1 = res[\"Wert1\"];\n  \/\/ const wert2 = res[\"Wert2\"];\n   log(JSON.stringify(res, null, 2));\n  \/\/ log(wert1);\n  return wert1;\n}\n\n\nasync function getImage(){\n  const image = Image.fromData(Data.fromBase64String(\"iVBORw0KGgoAAAANSUhEUgAAAOgAAADZCAMAAAAdUYxCAAABOFBMVEX\/\/\/\/tgAEdHRuHh4YAjaCNFzcAAAD8\/PygoKDtfgD39\/cbGxmTKkSDg4Lgvse4uLfu5OaFAB7JyckXFxXuhg\/3yZtISEcTExDu7u7m5uXsegDV1dVnZ2bc3NwODgtQUE85OTcsLCp5eXiTk5IjIyGampnAwL+srKs\/Pz4xMS9wcG9kZGPExMSfn55dXVyvr6\/++PH87d7+9euIACsAhJnk8vT627bp0tj1v47wlieMADDxoFL3yaGdP1b74MTwlTX2vnwAlKbuhyLvkDpksL1Anq622uCIwMr759LwmUbzrmT3yZHypEj51a3XrLjQnqvxnUG6fIv1v5b0tHzyqGCnXG3637u\/h5Xvjwr506TBhJTzq1e\/4Ob1uH10usWZytLypWjctcD3zrGiUGOtaXmJy9TwmlbV5+tzVwz8AAAdoElEQVR4nO2d+WPTttvAQ5LKiT0TZpfYjhM7jp3EOZq0HeWmUGihMGAM2PVyjh38\/\/\/BK\/mQ5Es+wkbZl+cXSuLY+liPnkuyXKt9la\/yVWjhq8nnbnZJUXWpU02Wuva5G19CpJYtVpXGzuSL6dZOQ2xUF7Ex\/UJIJxtQ+qjTz41QSDR7U9BGY\/C5IYpIZ3POxhfRpa1NBmgg9hcwSrnW5pwN+wvwMZ8CVPyfABXF8Vr676uuaK8l7QvA3BBUtCcD9XMTFJQNQEVbUrm0c\/KDznoy+Gz9vPfzxTuPbjx8+OjiPvVpZVCxIfGpmKptujNr6HbNvjju6P8i797l7x89vru9fQ5Ku90+d+72E\/JlRVCISVE+vUL+1ruyLAuCIHv\/1B1nZs7ttf5PaTgHZff0tzuvrp3rIUF8WNq9q7sbgnaojvrhu63zhLNu1ClBxIoBkFir0c5E43nYsk8AuLu7v7+\/d3gREm77hOfSpP1hI9AWCW7587e+2\/oGg6qLCCctAbBljqBCa5qqpmt+LuH+3t7p6Yerjx4zCUPQZ+E4rQBqd7Aecld+vH59iwLVQRYn7mOfFyp0Yyrpg4GmFhzF+3unh4cfbmLCNpMwlN5pVVBoa3FPXHgKu3OLAuXGuaAhr2xAYMPqIou1hMTZ3nj\/9PDyhw\/PX7x8dm27XZgwBL1YEVSk1PbCj9e3tiKg\/DxTc7N4FZ93NbJb646e0Obdn5+\/v3H7LuzDdjnCQHV7d7hKoOKamM\/zP323FQftyuVAKV4D8q4akyjn3ovbvqeoJO3e7Zt7lXpUJMOzFqhtFNQRKoGGvIoxnNKduve+MiSU3vbFPXy2UqAi5VV++Ob6VhK06BDNFNlaU3p7dQPMdu\/RHjlVKVBxTTh\/2aIEgw42Bq0rpo4vcnm7Mmi7fe3nyCAoAUpx8r9cTwXtbA5aBy3coc97lfvz7p0QsLwxmqoZnATU\/gSgxjxM4\/deVgRtb78M3efuzSdlQce4jMD9EOUkoGW9S5ooq9CB7d2oprntezjE3XvUe1QWlAyd81tbGaAVvUtEZDxIq\/bojcOwOw8ftnuPy4GKxMFduXU9C7S+kXfxMBWAQfdfVOrRN6Gx3b96u32u\/WspULGFHRL\/53eZPbrhEJUBGC6Ir969WqVHcbq9\/\/IculG9cqCkzvdLghODapuAQsquvdQ1qmpxszxo72b48\/1ghPd2S4BSins+rrcU6LIyKKIc6\/HA\/kN5zt\/wj28Het87LAFKSvF8YoBSoK1qoIIBZuNBSrp2eXsDzl70s0KgIslY\/i+JSUDFCt4F5mtgrtdS5fB2SWuEa0S7z7DW9+4UBhXJDOiVWyzQlVIe0zGjU1TcwQH++7SkI70Yjs\/dl+SHvVfFe5R06J8piktAh2XdKMKksxX+4P7J0Wv8X5i8lOF8E9rb3TfUp+3bRUGpHPR8aodi0JJJmqB0I7M2Bx\/fHl26dPIRf7BbypG+DP3n7sVIMrBduEfxCOJ\/TO3QEFQrB6o4okRj3j9uXmo2m8dEdWvPi4O274XxUGJo7xYDFad5HRqCSqUCI9Cla6YH746bvjygdPl58f7cDotDMFCI3Z7Tgj2Kb3s8aYmDTktwCmBEm9r7x0fNEJT6+GZh\/9K+Ecbxuxfj3z0pBkqylnSTS0Dt4qCyskPV7vm3GLPZfEeBXi7sX+6GeVltL5Gtf18IVMSlDe5pMviLgI4KG11ZoNfsvD4hmM0jGhRmHwU79BFu5avET+4UArWxhl34KUNzQ9BVUVDFoQpDtXdUdzabJ\/epr4pnpHiO5XIiPm7fKAS6Q4KFrA4NQYtmo\/KQKmpyb5sROSFuFI63go609z3+SbLM1H5YCBTfez4lbYmAam4xUHnYISgHx1HOiHep1Yo50jDnhPJbMuFp39stAko095sszgBUGhYyRjHOS3HQSLH+TQpWSodi11K7lnJnPEOVB0rylvPf5oB2rCKggkFzvo1zNt\/SnLWLRfxLextPbT9J04C7lwuA4oib+zFTcwPQnUKBEbBpzjhm1I3Cht8t0qFXsRakGi8vlsgDJdFCtuYGoI0iigtGxK\/E7VDCuxRM1LaxDz1Mvy9vCoCSaCFbcwPQUYEkTTGpBZIpnM0j2rtA\/3IvH7T3Cmvui\/QjXhQAxZfMtrkhaD8fVJCXBOKvFM6od4H+pUDE0MPT9\/vpbrf9Ph90jC+ZFf5hUK1A2g1IMbH2+igVNOJdarW\/c0Hbv2LNzRjR7b9380BFYiEZmuuD6vnxgtEn6efBSRpn8yTKWXuU26HtF0RzM1Zs3NjLBcUjijVEfdBJbn1Bdkn+yR2ncjaPY6B3ckGJ5mYFjO2Hp7mg2ET+wBiiPug0143KNlHcd6mKG3ejRRzpNk64L2f4Ii8nZ4MSn5deLKJBx3mKS898fkxX3Gbzrxjoz3mg7Rt4iGam6ShiYIKSFI1pi3zQRk6tU3CIZUuLFHyJutFa7TQvYui9CBOX7Kmau0\/yQEmgy+L0QfOKuvKKpNr3MxS3efQ6BrqbGxrdxPfkWRYoCo3YoLhpv+eC8iM2qODgmewsi4tAY96FzCxkyfbl8MjDTC3PBd3BxuPHXFA1ZxJYdrFh495lcTaP4py1x2zQ9m1siz5kHpkHKi4x6B+5oFpOYKQQw3aQpbhJNwodaQ7oDVzNzZ5kzAXF7v0C0xZ5oAN2YCQAEsz\/lcjNsMTdaK32PXvqkNgixvx4DqjYIl6UyemB6iYzXjBE0qGZmEk3mlYDivbo1fDAbFuUC0pWNzK9qA8qsSNAQIK\/ZLJNJO5dYPvZoKRuffor8yAGKJkXucIeogVAFRO3nGN0aDPuXaDkgOIZ0UP23cgGpdZPPWUk3cVAAQk9GCO0eSnhXWo1JqcXC\/jyIfuO5PRo7txScVDBIcFCpg9FoEnO1HIXlvbtcCEcx1jwwAQtMLdUHNQgBZT7LM1NutFa7RVLd8kcGmsJC7tHcUqVWChWHhSQwsIxCzTpRmGixgR9iNfCvakGKrZwh175Y1NQ2cV2LTv6Q5J0o6klaQr0b7yqiBFZMHuU5Mi\/53HmggJSHc7KQ\/0hGk\/SkBwyQd+Hh2XUi\/JAqZViF3I7NA9UMMhdY2rupWgJMNDJYqB7jOifAWrjGkr2ZGFhUGOBNTcz4fZBP9ZShMHpVzJ90F8rgZKiWE6YWwiULLDJzls80NRHfhgEfm3aB2UclAkqjklKxSwWFQJVVtgjJ+bOopLmXdiJGhUBMjQ8G5SU06\/kY+aBymPcUZmVBV\/SvAvbv9zFC+dZNisLlFriyOdbojxQqibGPWBypnqXWu1iNkL7Hn70jLXkNQOUWhHHnIgoBirUScbNNkXp3oXZV\/5kNpJdVgCVAUqt5iqkuGxQxSRr8dmmqHkpmaQh2WMg4DUau6yQOAOUeviskOIyQekiZ06HZniX2n42wTmcpDG9bSoolW7n5dtFQJUuOd19RoLmgaYkaezO2sbPKjHjp1RQUhCLPq1UDVQQSDjPDnObabVOHzTTvwQLN5EwQ\/800AnhzEu3i4AafdLgdzkd2jxJf4R0NzNcD9YcI2FGFSmg1HZT59MWlZcElS2ScH\/MwYTeJQM003P0yLo4ZsElCUrp7ZU\/CnkWJqigUCtQjnNB32Y89P0ki2IbH8IuiiZAKTt05afinJmg9AqUPEuEvEsGaFZ0R2ludqkzCSpSD2WV6s9MUDAnisuozmPQlBKgr5cZ7e\/t5R2RBira1HqREuMzG9RYUWfMV9xmM92NZmZg7cdYA+6w5y1oUHFKrW5\/+k0pznRQxaVWoOTERJ4cZYKmK2YPz6PVchbpUKAivbvfL4X9CgNUppeqvs5zoUjiC1Kw7D9KG6Tt23iRRt6DQBg0orYXisZDTFDZoh5nyUlDAznOAk33L2SRRi2+iD4dVBRtahU\/d\/5WGTOUBRrjzLW4SN5mgaY+jNd+hk3Rz3eLgO40duju\/OV66f5MAVVmFCefk4UGkuldMgJZ0qEZC+NioJ0J3Z1lvGc2qDGkxidfxBA1M0qAAWiy7b0bJJ7PXS\/ogVJG6MoPJa1tBihY0UvJi\/VnM3UmLZDTpH\/Zxms0dnM7lKosIbnwtFSQkAkqRB4eLM6Z6V3S5njb77HJPcwboVFQ\/ulPW9W6MwaqOPTzZmlLcjPkJBt0L25WqeezEt8xQfmnf1bU2hioEHsQ67gwZ\/M4GzS5VAqXcxlrUZKg\/C+3yoYIGaCyMaIfH\/xYgpPhXRJbbLQfYgPNKtDHQC+w1xCVABUMa0m3r1A8hOUBY6eq6Gx2mzyftfu4yPPuHuiP31Y1QRToFQSqOCO6cXk1v5hklAAD0GjDiW0p9ly\/D7ox5tbWLahJ0iLy+GDtI2vxSZpku9HY6rc2GaCHxR508kB\/32x4Irn+f\/A8WmRH1oP7RyU5j5ig1Jwged6udlp0GyC0GInPfLSusHxzIdYu7vVxOcpm4qmBqFBPtfeIB917Vkhx0Wp0tLzsSoUoPtKf13+PNev1g\/xyQhI027tA\/\/Ie76pAQr\/Ek7\/ZoM88t3vlj2+rd+r1b2+dj7SJe\/2glLENJTNJQ7L7ohdyEoObH\/oRee795ML5P7\/57ttKsvXHD1foFnHvjithQjfK3AcxcKS9h4TzaoltN9p3g0hKvVBZItso\/HVSQWk9YXoX6Eb89t6jOEv0JypH7LFOX05ev61KiYQN+mQ7xslYVZROSh6m2EzQXhEbYMYfvovLz8i\/UHaoLCfaPe\/akw23geUP7h8fXdoIM\/Zod1JOH7bPPcLPce8xl81lo97ZDPRtc0NID5TlRiHa39t4BXLt9Fq1vcjaG4Ieb46Z412Q7SEVhQ\/bFXfR6204TFMfj\/zEoLX9cHztXa26\/WN7m3mFfGGtkS8sycX06XJ4oxrlucgj7xWFtaa6qDzIv0wt2ACvKicxZlWFK1agZkmOdwnk8Nm56lvtXt2YEyrvg01JmUlaILuv2Bt7pwMi6fXOPT7Nv0AR2TReyPEuULjf2iWMrbfL8vb23bu3Hz\/6\/snpJ+hMqiUf7\/\/19uTk6KhKIJg5k4aFuewk2oHntu\/ee\/j3yzufmjAq\/Mf77\/46Pj45KRXfp68CpCVnMxGkn5Dw9sOX719cvXj5dD\/3hJ9I+I+v77978LYocL4tylphjQh7kPDG+xfPLz75Fwmjwh1AXh8Y8mYO43zNTe4T7RuZXyHh1ZsfLh+e7v+DalpYuAPYwX4PHzUT8f8lxrQLJZd\/9a2u14c9SPjm6ofDw9O9M0EYFe4AAsMuDnhDYMZkREROr16DhNvXXr25eHh6uncWCaMCeQ8+foRG+hjZ6OPXBfTWF\/RGECi7u2edMCYcD4kPvog3On2Vr\/JVvspX+Spf5at8la\/yBQjHq1XfwvfliDrQpenOqN9vTPXEmyv+M8LrnYZZBwAYBnoLn7XakfJ\/9OWJ2ml0DSCTLf0EBXRb+b\/7woSfzC1D9l\/R4Qn6T10B6\/yffhZRK75HWxWHioDAFLOx04KyMxoCtEhz6D+CpJ6xNx2rpmtXadJgVZcR5qoD7S160yvH8+qkq9SFurdWfG26k7xz\/JvC2UAG6\/KOgTcNoS4D+sEqJNpKERy0HFU3DaP7aZr4aYQ3FXp\/mcLSB0hJky\/PsR3ZQv9OLUE+W6BQ1YTZIP\/AqKBXYsnx7kTSsfzHIW2jbjSSX38+8VrslgZdA9ify5QvlnNvPyleNOrgTLnUHYCepS5tjSAHeV8iLUEcqM0h6JkKCRdKvQ6mpZs0BnWlzxjZ6twQrE3a9cllJqfalDyRABzZnezvtb5C7eZ3BoRDmtso70d5INSVVXaX6qZizDdp2KcWHfaMXCVmQxviyvPMXEU35bNldG1AvbKzjGgwsBVkM0sXIChgaPa\/LzBcMEaVgtIl8CLAafq3Zw7UEeog3GGGL5U0c2sHZS7AEPWU0sJyKIOioS6Kk8tcuYpoMP8QggRysEh1jJnCdbooExUM0F0P4krRsejNf5lN0Fs7045eoTLBa1rhgkYHDrTgJd+8CSirpGqDQe5tlmA+ipJuGQxHyyhrFFTVJT19fKgT089lG4wmw59LyTsh2e7MnBYktaEXDbKpJSA70\/FLe9FdtXI7WF3P6162DVPvbmNCHb+GqhK2gZMaDnBSg5KBKCiKgeyakWkR1QnMc8FwHG0NP7WAIitGwVinL+Pty1B+FZgP1Z4Z8CRAzD+J1hGHwNu\/WjacPnlh4xrIwwBUnQ6h0zVSMgBuaSqyYYoiNIkg6ox4aR2ADUYO7HBZlqPeHmaXBipuzIp1qSmHkRyMAEI\/o85l7\/lcwSpiTlR9ujI8VsFw5uHOMC2gLPwmqA1HASiOSpyM67iG4sDxrU7hjYiGF3q37u9zL8GTm9O1K8szOodY12XH1m1HKJY5aEMZehfvzwnU3OAtF31FEBQ0+ORR8ieclNAxTpPGcKQhwyQPfVVSG4bhRxOQ07BaHXj2RFiyHCqGq6Pjl3BER2pq\/Bg6L9QBkguVXuNquiEAqkulrqzYPHp5SjHQyUwIdwyH6Yg8Dv4SFGcxh85DWSUsCDd2RilDl1e1sYBQFb+Ooo4Mf\/tftSEAU+N42M5xbCAMXMUIouwJ7JnIWbU+zAngJ\/oMmJ6S8DB2JsrPjeD\/al6gCQoFAWPoRoON2uBo8a3SBAhGF96mqSPI3cTt6oBEg\/HVpwIKCw105cFK8VIivmEAFI\/wXTkeUfN9Q3H18KzyLPKttlJkU6vxBgjiaW4HUKCdmezdmIljmIXGqAi9qOXrjCP4MfpAkP13PPGuLAzjwc0EKEl4LCp6EaNXYAhAoQYq3lDjYQ9HvTTXADK2AVOg9CMNHswEFLBBDj083CCgSF\/m3lUMpVhyvzDqAYzuCN5gVbtKmH6tZMHZiR6vybIwjp+E\/h5mt16lSHe9wQMBfDwIGnlFFvwAJrThDsEabLgdAV1CXZ7CexF2uacSwZjh9LniafqgD5xxoQ7lV6gw5hmzib97JEwjBTkwC6JC7z+IZDBUUutEWFQ00l34h+QNOh0e7reUmwLZpayYtgDUtpwDeFsi\/rADDQQYTOokghlAp+AfMpg6BvwttE8r4EQLtZye0Tj0xifZv9E7gmBNoelAL2sNr2YIsh09XEmvE5EjoLvylGqJbAlvGt2QBY78OtYyddJFPhCfvGNE3qDFrw0DuaMVIFa\/H2guiqTgb8FYXQ+BFStIT7sZeURniLJnr\/MbAtRYbseRlW74Y82g3+HgmTh4V1mcA5SkAsQGrUtXs4GFL6wBXLBRJdGB2DK+CehVYtQW7erYcOCwGa6cIeaA9wlt\/aMuGwC4Ixc6I+i\/3GmUc21kxZEtC4L6mwzO4Zmn66FM7zgNzS\/Z4AxGMTIcN6whMVkgW4R6gd+BoLZlEM2HHtsbpJrUGrlAGVkCcdINGG54zsST5ciw1mNQdxyS\/kDLIY94fgKjMJgsLWH0YCrQNUTMP99K8YaB2Cic8a83gpbHdGEkRvntITxfiM1PXWgBWoyYUGsMUZ3N27FatQ3YUNr0ozfXCIvRaNV1YFg8mVqyFV7JVoYrOOrm3rkl0QV1nZ8CtBNr+HNoyoTFoDOHIe9CUmuSheYIYqkWDFG6mbE5euOT4GvnypsVi+xRh6olYQqnihbsz1Z2fw4aXQH158Ib8ajYCUc7bRqWqMhkwBAaegYdOmlsm2zFlSaoRLdqTe0+NEuw41FVuG6E5oAXBcHpr2bQqUqoeRBUADvRtmgjP5JKF0Ti+KOu70W3SqQeKIHQJk9ndVlRKE5tTB\/IdfpDNOMkg8ADDNDr3qLFB74BDBkmCsBEG0K2QlAYAlmDGmcbMgzHnDr8HhkY1P9h4YObLNAbvh30S78BEBTEzKtkQj3I5EReTwi29\/LeuSzPou4XplqysGjMFdREl\/6uC4A1n6IcUV+PusBA84cy2UJrAP+vdKP3HN4NyzWDZGtgych1QQcKht4ndh3mJ4pc9zUCgXpGTbNdgEawLDtzzCYNZRCh4scw8GfklDRoA3VIvFBrIwWE+iYIsiXSJ1JnKIME4fSvF84rQ9IUVFvMTjCRrAx5trAAcObBsNcb8\/kozIDVviJ34dkWAE2nC4rlNqjLw7DLoDJIfjkDdWZxhAaFAYOSCPi8qUHEKpjR\/HYwi7wUS4C5aHdOehwaXZwKZcjSMRRgWKt0dwVvJIoYB15GpFirVsScwg6sg6X\/Ea9Jc2AMx8zQ3gMNgh9+Acykt9X70AIYs9U4HnG0TBl2JLzZsCcNRDmmFZuDob+bU0OdLrqr0TSjfeoMJju816PAWrTiR0ldlKhPdF2a2DA\/lBcTdoVA7Rv1MGCoDVKXk6id1k6rkxJY6S3RHArAsUxTHK+lWFNUu9\/JC0I1KbsopUJXhqI\/bce210ml5FoWDDGANYMWCjqrVu5coAh71MiutrNF1ZedzgTe1rRe4TdbbzSAcZSvX+mFULWDDKCiQDOxahUov0szANLS6M8uE+jY2GUcGD4sXHNuT\/JrlTVUFmnFle5syBqGtszsoYYKspqmFtabMzVVi4UTjXzQ\/4JwK+V\/BHQmK8wE\/78iHKBf8\/IfFhUtkPhf6FE0DcSadCov2rQ1DaSI3\/23RAKxwv3GMg4zECgp0w+fS\/iG8YmHqCigVPfMgcLwUvu0Hr5RlxcowkByJkOkTyWNunKmFgP9Y9IIq53\/dUkHVcNYWaUk+IhX1WD0cPgv9GfkIP848n14SMRj8NFfcNGV6Tz+hroOH1wlWs+NXak4KDcPK\/vDGZThEP0TVGG5kWV2\/LMOLFwj0s2ZJ1b4MnYOlWcdqgKiTs264dJby2pjF5nAeVDZqy279DJmfqceTh9JphVeZ91FTXFH1J7xqjSfAWuxzrEw6aAzOZhE60JxHcVC\/wSgMyWcTxkAPEnUAY7rHdsIK5SWYc7nLghnNNQ5GPbnK2phq24Cd9Ro9K1w2dXaAjSojee3Jw6ube7U6\/3+wjUMPIfGjxVlNV8M857MSDVG3LAerjySJKljGgv4jxRM2aG1AP4MXwTU7KBjpKBFqiuLuqpKdrgAwwbdpaYO1qsQdDAEKwmeRpv0xxmg4QTSxMKgrfoQugep4TjhlSUXtDRVm4xyVltA97LyWigtScWIgCLR+rSH5YaKufKrvxHQ6MpmDfj+ng9b2A1mznA1Y6SEq9vDLYQLgno\/WeGnHaay6a+ZyFVdAemlp3bklXNMUNBoeZP1MdDoCgSwiBZo3Hp0Rll3QWRCsjgowlJFEOpuy1gUiiwaaBohEPL6YjaoPTC9OjkDVDWc6HTUIrbKaOwk1liUANVGuLFrSyi0tBL26FAceUJmQvNAa2OAxhpDdWEzo2tXBkCOVI1HhhNvSgnVnZL7qvaBUyTPyTFGSFJA4RjpxEAtE4kddqM6AkZkEcASGEaXTK6OgFsJ1HHgVbr0sg\/NBIbTyM1dq4FCM2\/F3YsFxaFGZgfNg1ITJFrfUkj1vjqo6w4tR6HVxR4KoM6Y0AxBU\/xoLqi6guliBHS1HAwGOq2t\/HolgAV1fX00M8KJpxEYVgL1Zsn1tQlG1InVRlcxclanVAStdeoWzxijQQPgSIzMIXVcI3hwQjRA\/OgkaNB0GHxEQT3vGZk\/GfSNnAc9qoJyC2OsZVvdQFRHiC7ZFOVZ0GInsYQvBjoG4QL4SR1PfYagMNCKLjyVHIe9sKoqaE0H5iQXtDasR72lXQ+e+dFdY4GZ\/H+ioLU1CB8jm2JkDKrNwSgCqg\/\/KdDaqr4yMkGDxdhauAZO9VvBzY1VcIQoC\/6oUqepIWBNsowdjwWZ+BAqBJ2EsS0frMvuGDmzlNVBNSAoWWOUayxaek2dLIAfn9WmXXup8rpt4Rl5zTWceavTGS\/Cp2MgqDZAEqzyFcGsofODTp+Kslr11brTWY9hQuB\/pvfnnUFt0OkCm22MRMVIA5WpgE1bREBnYexmA7pHHc+PmqNB8J3jml2YPoWLqIEx7JquQC3f0Fzo\/yxLxmsP1pbhIrECHYQ3WHZN1wLUUzk7Qh25MQWEa7Ggv555B+U99jBZpUxzc3P6Q77RpUwn1zDX4TW62KTrfZ+zGyx04KSVoyhDYonU0VBRLPq1UjWuM++6XVEP1VJaBecITSzfWdSV+oKeUJa86yxsCX\/Gr0208GAd68\/\/BxHB\/PWc75yTAAAAAElFTkSuQmCC\"));\n  return image;\n  }",
  "share_sheet_inputs" : [

  ]
}